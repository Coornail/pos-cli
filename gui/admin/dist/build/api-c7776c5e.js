import{I as e,O as t}from"./main-19b4c249.js";import{n}from"./store-19265c87.js";function a(e,t="default",a){n.set({type:t,message:e,timeout:a})}function r(e,t){a(e,"info",t)}function s(e,t){a(e,"success",t)}var o=(()=>{const{subscribe:t,set:n,update:a}=e({});return{subscribe:t,set:n,update:a,reset:()=>{n({})}}})();var d=(()=>{const{subscribe:t,set:n,update:a}=e({page:1});return{subscribe:t,set:n,update:a,setPaginationData:({total_entries:e,total_pages:t})=>{a(n=>({...n,total_entries:e,total_pages:t}))},setSchemaId:e=>{a(t=>({...t,schemaId:e}))},reset:()=>a(e=>({...e,page:1})),increment:()=>{a(e=>{const t=e.page+1;return{...e,page:t}})},decrement:()=>{a(e=>{const t=e.page-1||1;return{...e,page:t}})}}})(),l={array:"value_array",boolean:"value_boolean",date:"value",datetime:"value",float:"value_float",integer:"value_int",string:"value",text:"value",upload:"value"};const i=e=>Object.keys(e).map(t=>{const{name:n,value:a,attribute_type:r}=e[t];return`{ name: "${n}", ${l[r]}: ${"string"===r?`"${a}"`:a}}`}).join("\n"),u=e=>fetch("/api/graph",{headers:{"Content-Type":"application/json"},method:"POST",body:JSON.stringify(e)}).then(e=>e.json()).then(e=>{if(!e.errors)return e&&e.data;{const t=e.errors[0].message;a("Error: "+t,"danger",5e3)}});var p={getModelSchemas:e=>u({query:`query {\n      admin_model_schemas(\n          per_page: 100\n          ${e?`filter: { id: { value: ${e} } }`:""}\n        ) {\n        results {\n          id\n          name\n          properties {\n            name\n            attribute_type\n          }\n        }\n      }\n    }`}).then(e=>e.admin_model_schemas.results),getModels({schemaId:e,id:n,page:a=1,deleted:r=!1}){const s=t(o);let l="";s.property&&s.operation&&s.type&&(l=(e=>`\n    properties: [{\n      name: "${e.property}"\n      ${e.operation}: ${e.value}\n    }]\n  `)(s));return u({query:`query {\n      models(\n        page: ${a}\n        per_page: 20,\n        sort: { created_at: { order: DESC } },\n        filter: {\n          ${e?`model_schema_id: { value: ${e} }`:""}\n          ${n?`id: { value: ${n} }`:""}\n          ${r?"deleted_at: { exists: true }":""}\n          ${l}\n        }\n      ) {\n        total_pages\n        results {\n          id\n          created_at\n          updated_at\n          deleted_at\n          properties\n        }\n      }\n    }`}).then(e=>(e&&e.models&&d.setPaginationData({total_pages:e.models.total_pages}),e.models.results))},updateModel({id:e,props:t}){const n=i(t);return u({query:`\n      mutation {\n        model_update(\n          id: ${e},\n          model: {\n            properties: [${n}]\n          }\n        ) {\n          id\n        }\n      }`})},deleteModel:e=>u({query:`mutation {\n      model_delete(id: ${e}) {\n        id\n      }\n    }`}),undeleteModel:e=>u({query:`\n      mutation {\n        model_update(\n          id: ${e},\n          model: { deleted_at: null }\n        ) {\n          id\n        }\n      }`}),createModel(e,t){const n=i(t);return u({query:`mutation {\n      model_create(model: {\n        model_schema_name: "${e}",\n        properties: [${n}]\n      }) {\n        id\n      }\n    }`})}};export{p as a,o as f,r as i,d as p,s};
